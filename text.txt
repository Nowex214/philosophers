int	init_forks(t_data *data)
{
	int	i;

	i = 0;
	data->forks = malloc(sizeof(pthread_mutex_t) * data->nb_philo);
	if (!data->forks)
		return (1);
	while (i < data->nb_philo)
	{
		pthread_mutex_init(&data->forks[i], NULL);
		i++;
	}
	return (0);
}

int	init_philo(t_data *data)
{
	int	i;

	i = 0;
	data->philos = malloc(sizeof(t_philo) * data->nb_philo);
	if (!data->philos)
		return (1);
	while (i < data->nb_philo)
	{
		data->philos[i].id = i;
		data->philos[i].count_eat = 0;
		data->philos[i].eating = 0;
		data->philos[i].status = 0;
		data->philos[i].time_die = get_time_in_ms() + data->death_time;
		data->philos[i].right_fork = &data->forks[i]; 
		data->philos[i].left_fork = &data->forks[(i + 1) % data->nb_philo];
		data->philos[i].data = data;
		pthread_mutex_init(&data->philos[i].lock, NULL);
		i++;
	}
	return (0);
}

int	init_thread(t_data *data)
{
	int			i;
	pthread_t	monitor;

	i = 0;
	if (!data->philos)
		return (1);
	while (i < data->nb_philo)
	{
		if (pthread_create(&data->philos[i].thread, NULL, &routine, &data->philos[i]) != 0)
		{
			printf("‚ùå Error: Impossible to create thread of Philosopher %d ‚ò†Ô∏è\n", i);
			return(1);
		}
		i++;
	}
	if (pthread_create(&monitor, NULL, &monitor_thread, data) != 0)
	{
		printf("‚ùå Error: Impossible to create monitor thread..\n");
		return (1);
	}
	pthread_join(monitor, NULL);
	return(0);
}

int	parse_arg(int ac, char **av, t_data *data)
{
	if (ac < 5)
	{
		printf ("ü§ì‚òùÔ∏èTry: ./philo <nb_philo> <time_to_die> <time_to_eat> <time_to_sleep> [nb_eat]\n");
		return (1);
	}
	data->nb_philo = ft_atoi(av[1]);
	data->death_time = ft_atoi(av[2]);
	data->eat_time = ft_atoi(av[3]);
	data->sleep_time = ft_atoi(av[4]);
	if (ac == 6)
		data->nb_eat = ft_atoi(av[5]);
	else
		data->nb_eat = -1;
	if (data->nb_philo < 0 || data->death_time < 0 || data->eat_time < 0 ||
		data->sleep_time < 0 ||(ac == 6 && data->nb_eat < 0))
	{
		printf ("‚ùå Error: All arg need to be positif number.\n");
		return(1);
	}
	return (0);
}

void	*monitor_thread(void *arg)
{
	t_data	*data;
	int		i;

	data = (t_data *)arg;

	if (!data->philos)
		return (NULL);
	while (!data->end)
	{
		i = 0;
		while (i < data->nb_philo)
		{
			if (data->philos[i].time_die == 0)
				continue;
			if (get_time_in_ms() > data->philos[i].time_die)
			{
				printf("ü™¶ Philosophers %d is dead !\n", data->philos[i].id);
				data->end = 1;
				break;
			}
			i++;
		}
		usleep(1000);
	}
	return (NULL);
}

static void	take_fork(t_philo *philo)
{
	pthread_mutex_lock(philo->left_fork);
	printf("Philosopher %d take left forküç¥\n", philo->id);
	pthread_mutex_lock(philo->right_fork);
	printf("Philosopher %d take right forküç¥\n", philo->id);
}

static void	eat(t_philo *philo, t_data *data)
{
	printf("Philosopher %d eatüçù\n", philo->id);
	philo->time_die = get_time_in_ms() + data->death_time;
	usleep(data->eat_time * 1000);
	philo->count_eat++;
	pthread_mutex_unlock(philo->left_fork);
	pthread_mutex_unlock(philo->right_fork);
	printf("Philosopher %d drop his forks ‚¨áÔ∏èüç¥\n", philo->id);
}

static void	sleep_philo(t_philo *philo, t_data *data)
{
	printf("Philosopher %d sleep üò¥\n", philo->id);
	usleep(data->sleep_time * 1000);
}

static void	think(t_philo *philo)
{
	printf("Philosopher %d think üí≠\n", philo->id);
}

void	*routine(void *arg)
{
	t_philo	*philo;
	t_data	*data;

	philo = (t_philo *)arg;
	data = philo->data;
	printf("Philosopher %d start üü¢\n", philo->id);
	while (!data->end)
	{
		take_fork(philo);
		eat(philo, data);
		sleep_philo(philo, data);
		think(philo);
	}
	return (NULL);
}

int	ft_atoi(const char *str)
{
	int	res;
	int	sign;
	int	i;

	i = 0;
	res = 0;
	sign = 1;
	while ((str[i] == 32) || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign *= -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		res = res * 10 + (str[i] - '0');
		i++;
	}
	return (res * sign);
}

double	get_time_in_ms(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return ((tv.tv_sec * 1000) + (tv.tv_usec / 1000));
}

int	wait_thread(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->nb_philo)
	{
		if(pthread_join(data->philos[i].thread, NULL) != 0)
		{
			printf("‚ùå Error: pthread_join failed for %d\n", i);
			return (1);
		}
		i++;
	}
	return (0);
}

void	cleanup(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->nb_philo)
	{
		pthread_mutex_destroy(&data->forks[i]);
		i++;
	}
	free(data->forks);
	free(data->philos);
}

int	main(int ac, char **av)
{
	t_data	data;

	data.end = 0;
	if (parse_arg(ac, av, &data) != 0)
		return (1);
	if (init_forks(&data) != 0)
	{
		printf("‚ùå Error: init forks failed\n");
		return (1);
	}
	if (init_philo(&data) != 0)
	{
		printf("‚ùå Error: init philos failed\n");
		return (1);
	}
	if (init_thread(&data) != 0)
	{
		printf("‚ùå Error: init thread failed\n");
		return (1);
	}
	wait_thread(&data);
	cleanup(&data);
	return (0);
}

#ifndef PHILO_H
# define PHILO_H

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/time.h>


typedef struct s_philo
{
	int				id;
	int				count_eat;
	int				eating;
	int				status;
	unsigned int	time_die;
	pthread_t		thread;
	pthread_mutex_t	*right_fork;
	pthread_mutex_t	*left_fork;
	pthread_mutex_t	lock;
	struct s_data	*data;
}	t_philo;


typedef struct s_data
{
	int				nb_philo;
	int				nb_eat;
	int				end;
	int				dead;
	unsigned int	start_time;
	int	sleep_time;
	int	eat_time;
	int	death_time;
	pthread_t		*threads;
	t_philo			*philos;
	pthread_mutex_t	*forks;
	pthread_mutex_t	lock;
	pthread_mutex_t	write;
}	t_data;

//Utils
int			ft_atoi(const char *str);
int			wait_thread(t_data *data);
void		cleanup(t_data *data);
double		get_time_in_ms(void);
//Parsing
void		*monitor_thread(void *arg);
int			parse_arg(int ac, char **av, t_data *data);
//Init
int			init_philo(t_data *data);
int			init_forks(t_data *data);
int			init_thread(t_data *data);
//Routine
void		*routine(void *arg);

#endif
